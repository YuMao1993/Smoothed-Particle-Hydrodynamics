#version 450 core

//image size
layout(location = 0) uniform int width;
layout(location = 1) uniform int height;

//input&output image texture
layout(binding = 0, rgba32f) readonly uniform image2D inputImg;
layout(binding = 1, rgba32f) writeonly uniform image2D outputImg;

//local work group size
layout(local_size_x = 32,
       local_size_y = 32) in;

const float gfilter[225] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0.000001,  0.000001,  0.000001,  0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0.000001,  0.000014,  0.000055,  0.000088,  0.000055,  0.000014,  0.000001,  0, 0, 0, 0,
0, 0, 0, 0.000001,  0.000036,  0.000362,  0.001445,  0.002289,  0.001445,  0.000362,  0.000036,  0.000001,  0, 0, 0,
0, 0, 0, 0.000014,  0.000362,  0.003672,  0.014648,  0.023204,  0.014648,  0.003672,  0.000362,  0.000014,  0, 0, 0,
0, 0, 0.000001,  0.000055,  0.001445,  0.014648,  0.058433,  0.092564,  0.058433,  0.014648,  0.001445,  0.000055,  0.000001,  0, 0,
0, 0, 0.000001,  0.000088,  0.002289,  0.023204,  0.092564,  0.146632,  0.092564,  0.023204,  0.002289,  0.000088,  0.000001,  0, 0,
0, 0, 0.000001,  0.000055,  0.001445,  0.014648,  0.058433,  0.092564,  0.058433,  0.014648,  0.001445,  0.000055,  0.000001,  0, 0,
0, 0, 0, 0.000014,  0.000362,  0.003672,  0.014648,  0.023204,  0.014648,  0.003672,  0.000362,  0.000014,  0, 0, 0,
0, 0, 0, 0.000001,  0.000036,  0.000362,  0.001445,  0.002289,  0.001445,  0.000362,  0.000036,  0.000001,  0, 0, 0,
0, 0, 0, 0, 0.000001,  0.000014,  0.000055,  0.000088,  0.000055,  0.000014, 0.000001,  0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0.000001,  0.000001,  0.000001,  0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void main()
{
    //acquire ID
    vec2 coord = gl_GlobalInvocationID.xy;

    //only compute pixels falling inside the image
    if(coord.x < width && coord.y < height)
    {
      vec4 value = vec4(0,0,0,0);
      for(int i=-7; i <=7; i ++)
      {
        for(int j=-7; j <=7; j++)
        {
          float weight = gfilter[(j+7)*15+(i+7)];
          value += imageLoad(inputImg, ivec2(coord.x + i, coord.y + j)) * weight;
        }
      }
      imageStore(outputImg, ivec2(coord), value);
    }
}
